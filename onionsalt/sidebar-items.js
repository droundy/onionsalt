initSidebarItems({"constant":[["ENCRYPTEDPAYLOAD_LENGTH","The size of an encrypted payload."],["PACKET_LENGTH","`PACKET_LENGTH` is the size that we actually send to each recipient."],["PAYLOAD_LENGTH","`PAYLOAD_LENGTH` is the size of the payload that the primary recipient can get.  It differs from `ENCRYPTEDPAYLOAD_LENGTH` by 48 (or `OVERHEADBYTES`)."],["ROUTE_COUNT","The number of routers we send through.  Eventually I want to implement the feature to send through fewer routers with the message arriving back early."],["ROUTING_LENGTH","The ROUTING_LENGTH is big enough for an ipv6 address and some extra information."]],"fn":[["onionbox","Encrypt a message in an onion defined by `keys_and_routings`, with `payload` directed to `payload_recipient`."],["onionbox_open","The message is passed in `input`, and a struct is returned which has methods to access the decrypted routing information, the decrypted message (to be passed to the next router), to access the payload, and to insert an encrypted response to the payload."]],"mod":[["creatediagrams",""],["crypto","A rust translation of the TweetNaCl library.  It is mostly a direct translation, but in places I tried to make the API more rustic.  It has three major features, of which you are likely to use only one."]],"struct":[["OnionBox",""],["OpenedOnionBox",""]]});